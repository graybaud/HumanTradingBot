Trading endpoints






Current open orders (USER_DATA)
GET /api/v3/openOrders

Get all open orders on a symbol. Careful when accessing this with no symbol.

Weight: 6 for a single symbol; 80 when the symbol parameter is omitted

Parameters:

Name	Type	Mandatory	Description
symbol	STRING	NO	
recvWindow	LONG	NO	The value cannot be greater than 60000
timestamp	LONG	YES	
If the symbol is not sent, orders for all symbols will be returned in an array.
Data Source: Memory => Database

Response:

[
  {
    "symbol": "LTCBTC",
    "orderId": 1,
    "orderListId": -1, // Unless an order list, the value will always be -1
    "clientOrderId": "myOrder1",
    "price": "0.1",
    "origQty": "1.0",
    "executedQty": "0.0",
    "cummulativeQuoteQty": "0.0",
    "status": "NEW",
    "timeInForce": "GTC",
    "type": "LIMIT",
    "side": "BUY",
    "stopPrice": "0.0",
    "icebergQty": "0.0",
    "time": 1499827319559,
    "updateTime": 1499827319559,
    "isWorking": true,
    "origQuoteOrderQty": "0.000000",
    "workingTime": 1499827319559,
    "selfTradePreventionMode": "NONE"
  }
]

Note: The payload above does not show all fields that can appear. Please refer to Conditional fields in Order Responses.

All orders (USER_DATA)
GET /api/v3/allOrders

Get all account orders; active, canceled, or filled.

Weight: 20

Data Source: Database

Parameters:

Name	Type	Mandatory	Description
symbol	STRING	YES	
orderId	LONG	NO	
startTime	LONG	NO	
endTime	LONG	NO	
limit	INT	NO	Default 500; max 1000.
recvWindow	LONG	NO	The value cannot be greater than 60000
timestamp	LONG	YES	
Notes:

If orderId is set, it will get orders >= that orderId. Otherwise most recent orders are returned.
For some historical orders cummulativeQuoteQty will be < 0, meaning the data is not available at this time.
If startTime and/or endTime provided, orderId is not required.
The time between startTime and endTime can't be longer than 24 hours.
Response:

[
  {
    "symbol": "LTCBTC",
    "orderId": 1,
    "orderListId": -1, // Unless an order list, the value will always be -1
    "clientOrderId": "myOrder1",
    "price": "0.1",
    "origQty": "1.0",
    "executedQty": "0.0",
    "cummulativeQuoteQty": "0.0",
    "status": "NEW",
    "timeInForce": "GTC",
    "type": "LIMIT",
    "side": "BUY",
    "stopPrice": "0.0",
    "icebergQty": "0.0",
    "time": 1499827319559,
    "updateTime": 1499827319559,
    "isWorking": true,
    "origQuoteOrderQty": "0.000000",
    "workingTime": 1499827319559,
    "selfTradePreventionMode": "NONE",
  }
]

Note: The payload above does not show all fields that can appear. Please refer to Conditional fields in Order Responses.

Order lists
New OCO - Deprecated (TRADE)
POST /api/v3/order/oco 

Send in a new OCO.

Price Restrictions:
SELL: Limit Price > Last Price > Stop Price
BUY: Limit Price < Last Price < Stop Price
Quantity Restrictions:
Both legs must have the same quantity.
ICEBERG quantities however do not have to be the same
OCO adds 2 orders to the unfilled order count, EXCHANGE_MAX_ORDERS filter and the MAX_NUM_ORDERS filter.
Weight: 1

Parameters:

Name	Type	Mandatory	Description
symbol	STRING	YES	
listClientOrderId	STRING	NO	A unique Id for the entire orderList
side	ENUM	YES	
quantity	DECIMAL	YES	
limitClientOrderId	STRING	NO	A unique Id for the limit order
price	DECIMAL	YES	
limitStrategyId	LONG	NO	
limitStrategyType	INT	NO	The value cannot be less than 1000000.
limitIcebergQty	DECIMAL	NO	Used to make the LIMIT_MAKER leg an iceberg order.
trailingDelta	LONG	NO	
stopClientOrderId	STRING	NO	A unique Id for the stop loss/stop loss limit leg
stopPrice	DECIMAL	YES	
stopStrategyId	LONG	NO	
stopStrategyType	INT	NO	The value cannot be less than 1000000.
stopLimitPrice	DECIMAL	NO	If provided, stopLimitTimeInForce is required.
stopIcebergQty	DECIMAL	NO	Used with STOP_LOSS_LIMIT leg to make an iceberg order.
stopLimitTimeInForce	ENUM	NO	Valid values are GTC/FOK/IOC
newOrderRespType	ENUM	NO	Set the response JSON.
selfTradePreventionMode	ENUM	NO	The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
recvWindow	LONG	NO	The value cannot be greater than 60000
timestamp	LONG	YES	
Data Source: Matching Engine

Response:

{
  "orderListId": 0,
  "contingencyType": "OCO",
  "listStatusType": "EXEC_STARTED",
  "listOrderStatus": "EXECUTING",
  "listClientOrderId": "JYVpp3F0f5CAG15DhtrqLp",
  "transactionTime": 1563417480525,
  "symbol": "LTCBTC",
  "orders": [
    {
      "symbol": "LTCBTC",
      "orderId": 2,
      "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos"
    },
    {
      "symbol": "LTCBTC",
      "orderId": 3,
      "clientOrderId": "xTXKaGYd4bluPVp78IVRvl"
    }
  ],
  "orderReports": [
    {
      "symbol": "LTCBTC",
      "orderId": 2,
      "orderListId": 0,
      "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos",
      "transactTime": 1563417480525,
      "price": "0.000000",
      "origQty": "0.624363",
      "executedQty": "0.000000",
      "cummulativeQuoteQty": "0.000000",
      "status": "NEW",
      "timeInForce": "GTC",
      "type": "STOP_LOSS",
      "side": "BUY",
      "stopPrice": "0.960664",
      "workingTime": -1,
      "selfTradePreventionMode": "NONE"
    },
    {
      "symbol": "LTCBTC",
      "orderId": 3,
      "orderListId": 0,
      "clientOrderId": "xTXKaGYd4bluPVp78IVRvl",
      "transactTime": 1563417480525,
      "price": "0.036435",
      "origQty": "0.624363",
      "executedQty": "0.000000",
      "cummulativeQuoteQty": "0.000000",
      "status": "NEW",
      "timeInForce": "GTC",
      "type": "LIMIT_MAKER",
      "side": "BUY",
      "workingTime": 1563417480525,
      "selfTradePreventionMode": "NONE"
    }
  ]
}

New Order list - OCO (TRADE)
POST /api/v3/orderList/oco

Send in an one-cancels-the-other (OCO) pair, where activation of one order immediately cancels the other.

An OCO has 2 legs called the above leg and below leg.
One of the legs must be a LIMIT_MAKER order and the other leg must be STOP_LOSS or STOP_LOSS_LIMIT order.
Price restrictions:
If the OCO is on the SELL side: LIMIT_MAKER price > Last Traded Price > stopPrice
If the OCO is on the BUY side: LIMIT_MAKER price < Last Traded Price < stopPrice
OCOs add 2 orders to the unfilled order count, EXCHANGE_MAX_ORDERS filter, and the MAX_NUM_ORDERS filter.
Weight: 1

Parameters:

Name	Type	Mandatory	Description
symbol	STRING	Yes	
listClientOrderId	STRING	No	Arbitrary unique ID among open order lists. Automatically generated if not sent.
A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired.
listClientOrderId is distinct from the aboveClientOrderId and the belowCLientOrderId.
side	ENUM	Yes	BUY or SELL
quantity	DECIMAL	Yes	Quantity for both legs of the order list.
aboveType	ENUM	Yes	Supported values : STOP_LOSS_LIMIT, STOP_LOSS, LIMIT_MAKER
aboveClientOrderId	STRING	No	Arbitrary unique ID among open orders for the above leg order. Automatically generated if not sent
aboveIcebergQty	LONG	No	Note that this can only be used if aboveTimeInForce is GTC.
abovePrice	DECIMAL	No	
aboveStopPrice	DECIMAL	No	Can be used if aboveType is STOP_LOSS or STOP_LOSS_LIMIT.
Either aboveStopPrice or aboveTrailingDelta or both, must be specified.
aboveTrailingDelta	LONG	No	See Trailing Stop order FAQ.
aboveTimeInForce	DECIMAL	No	Required if the aboveType is STOP_LOSS_LIMIT.
aboveStrategyId	LONG	No	Arbitrary numeric value identifying the above leg order within an order strategy.
aboveStrategyType	INT	No	Arbitrary numeric value identifying the above leg order strategy.
Values smaller than 1000000 are reserved and cannot be used.
belowType	ENUM	Yes	Supported values : STOP_LOSS_LIMIT, STOP_LOSS, LIMIT_MAKER
belowClientOrderId	STRING	No	
belowIcebergQty	LONG	No	Note that this can only be used if belowTimeInForce is GTC.
belowPrice	DECIMAL	No	
belowStopPrice	DECIMAL	No	Can be used if belowType is STOP_LOSS or STOP_LOSS_LIMIT.
Either belowStopPrice or belowTrailingDelta or both, must be specified.
belowTrailingDelta	LONG	No	See Trailing Stop order FAQ.
belowTimeInForce	ENUM	No	Required if the belowType is STOP_LOSS_LIMIT.
belowStrategyId	LONG	No	Arbitrary numeric value identifying the below leg order within an order strategy.
belowStrategyType	INT	No	Arbitrary numeric value identifying the below leg order strategy.
Values smaller than 1000000 are reserved and cannot be used.
newOrderRespType	ENUM	No	Select response format: ACK, RESULT, FULL
selfTradePreventionMode	ENUM	No	The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
recvWindow	LONG	No	The value cannot be greater than 60000.
timestamp	LONG	Yes	
Data Source: Matching Engine

Response:

Response format for orderReports is selected using the newOrderRespType parameter. The following example is for the RESULT response type. See POST /api/v3/order for more examples.

{
    "orderListId": 1,
    "contingencyType": "OCO",
    "listStatusType": "EXEC_STARTED",
    "listOrderStatus": "EXECUTING",
    "listClientOrderId": "lH1YDkuQKWiXVXHPSKYEIp",
    "transactionTime": 1710485608839,
    "symbol": "LTCBTC",
    "orders": [
        {
            "symbol": "LTCBTC",
            "orderId": 10,
            "clientOrderId": "44nZvqpemY7sVYgPYbvPih"
        },
        {
            "symbol": "LTCBTC",
            "orderId": 11,
            "clientOrderId": "NuMp0nVYnciDiFmVqfpBqK"
        }
    ],
    "orderReports": [
        {
            "symbol": "LTCBTC",
            "orderId": 10,
            "orderListId": 1,
            "clientOrderId": "44nZvqpemY7sVYgPYbvPih",
            "transactTime": 1710485608839,
            "price": "1.00000000",
            "origQty": "5.00000000",
            "executedQty": "0.00000000",
            "cummulativeQuoteQty": "0.00000000",
            "status": "NEW",
            "timeInForce": "GTC",
            "type": "STOP_LOSS_LIMIT",
            "side": "SELL",
            "stopPrice": "1.00000000",
            "workingTime": -1,
            "icebergQty": "1.00000000",
            "selfTradePreventionMode": "NONE"
        },
        {
            "symbol": "LTCBTC",
            "orderId": 11,
            "orderListId": 1,
            "clientOrderId": "NuMp0nVYnciDiFmVqfpBqK",
            "transactTime": 1710485608839,
            "price": "3.00000000",
            "origQty": "5.00000000",
            "executedQty": "0.00000000",
            "cummulativeQuoteQty": "0.00000000",
            "status": "NEW",
            "timeInForce": "GTC",
            "type": "LIMIT_MAKER",
            "side": "SELL",
            "workingTime": 1710485608839,
            "selfTradePreventionMode": "NONE"
        }
    ]
}

New Order List - OTO (TRADE)
POST /api/v3/orderList/oto

Places an OTO.

An OTO (One-Triggers-the-Other) is an order list comprised of 2 orders.
The first order is called the working order and must be LIMIT or LIMIT_MAKER. Initially, only the working order goes on the order book.
The second order is called the pending order. It can be any order type except for MARKET orders using parameter quoteOrderQty. The pending order is only placed on the order book when the working order gets fully filled.
If either the working order or the pending order is cancelled individually, the other order in the order list will also be canceled or expired.
When the order list is placed, if the working order gets immediately fully filled, the placement response will show the working order as FILLED but the pending order will still appear as PENDING_NEW. You need to query the status of the pending order again to see its updated status.
OTOs add 2 orders to the unfilled order count, EXCHANGE_MAX_NUM_ORDERS filter and MAX_NUM_ORDERS filter.
Weight: 1

Parameters:

Name	Type	Mandatory	Description
symbol	STRING	YES	
listClientOrderId	STRING	NO	Arbitrary unique ID among open order lists. Automatically generated if not sent.
A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired.
listClientOrderId is distinct from the workingClientOrderId and the pendingClientOrderId.
newOrderRespType	ENUM	NO	Format of the JSON response. Supported values: Order Response Type
selfTradePreventionMode	ENUM	NO	The allowed values are dependent on what is configured on the symbol. Supported values: STP Modes
workingType	ENUM	YES	Supported values: LIMIT,LIMIT_MAKER
workingSide	ENUM	YES	Supported values: Order Side
workingClientOrderId	STRING	NO	Arbitrary unique ID among open orders for the working order.
Automatically generated if not sent.
workingPrice	DECIMAL	YES	
workingQuantity	DECIMAL	YES	Sets the quantity for the working order.
workingIcebergQty	DECIMAL	NO	This can only be used if workingTimeInForce is GTC, or if workingType is LIMIT_MAKER.
workingTimeInForce	ENUM	NO	Supported values: Time In Force
workingStrategyId	LONG	NO	Arbitrary numeric value identifying the working order within an order strategy.
workingStrategyType	INT	NO	Arbitrary numeric value identifying the working order strategy.
Values smaller than 1000000 are reserved and cannot be used.
pendingType	ENUM	YES	Supported values: Order Types
Note that MARKET orders using quoteOrderQty are not supported.
pendingSide	ENUM	YES	Supported values: Order Side
pendingClientOrderId	STRING	NO	Arbitrary unique ID among open orders for the pending order.
Automatically generated if not sent.
pendingPrice	DECIMAL	NO	
pendingStopPrice	DECIMAL	NO	
pendingTrailingDelta	DECIMAL	NO	
pendingQuantity	DECIMAL	YES	Sets the quantity for the pending order.
pendingIcebergQty	DECIMAL	NO	This can only be used if pendingTimeInForce is GTC, or if pendingType is LIMIT_MAKER.
pendingTimeInForce	ENUM	NO	Supported values: Time In Force
pendingStrategyId	LONG	NO	Arbitrary numeric value identifying the pending order within an order strategy.
pendingStrategyType	INT	NO	Arbitrary numeric value identifying the pending order strategy.
Values smaller than 1000000 are reserved and cannot be used.
recvWindow	LONG	NO	The value cannot be greater than 60000.
timestamp	LONG	YES	
Mandatory parameters based on pendingType or workingType
Depending on the pendingType or workingType, some optional parameters will become mandatory.

Type	Additional mandatory parameters	Additional information
workingType = LIMIT	workingTimeInForce	
pendingType = LIMIT	pendingPrice, pendingTimeInForce	
pendingType = STOP_LOSS or TAKE_PROFIT	pendingStopPrice and/or pendingTrailingDelta	
pendingType = STOP_LOSS_LIMIT or TAKE_PROFIT_LIMIT	pendingPrice, pendingStopPrice and/or pendingTrailingDelta, pendingTimeInForce	
Data Source:

Matching Engine

Response:

{
    "orderListId": 0,
    "contingencyType": "OTO",
    "listStatusType": "EXEC_STARTED",
    "listOrderStatus": "EXECUTING",
    "listClientOrderId": "yl2ERtcar1o25zcWtqVBTC",
    "transactionTime": 1712289389158,
    "symbol": "ABCDEF",
    "orders": [
        {
            "symbol": "LTCBTC",
            "orderId": 4,
            "clientOrderId": "Bq17mn9fP6vyCn75Jw1xya"
        },
        {
            "symbol": "LTCBTC",
            "orderId": 5,
            "clientOrderId": "arLFo0zGJVDE69cvGBaU0d"
        }
    ],
    "orderReports": [
        {
            "symbol": "LTCBTC",
            "orderId": 4,
            "orderListId": 0,
            "clientOrderId": "Bq17mn9fP6vyCn75Jw1xya",
            "transactTime": 1712289389158,
            "price": "1.00000000",
            "origQty": "1.00000000",
            "executedQty": "0.00000000",
            "cummulativeQuoteQty": "0.00000000",
            "status": "NEW",
            "timeInForce": "GTC",
            "type": "LIMIT",
            "side": "SELL",
            "workingTime": 1712289389158,
            "selfTradePreventionMode": "NONE"
        },
        {
            "symbol": "LTCBTC",
            "orderId": 5,
            "orderListId": 0,
            "clientOrderId": "arLFo0zGJVDE69cvGBaU0d",
            "transactTime": 1712289389158,
            "price": "0.00000000",
            "origQty": "5.00000000",
            "executedQty": "0.00000000",
            "cummulativeQuoteQty": "0.00000000",
            "status": "PENDING_NEW",
            "timeInForce": "GTC",
            "type": "MARKET",
            "side": "BUY",
            "workingTime": -1,
            "selfTradePreventionMode": "NONE"
        }
    ]
}

Note: The payload above does not show all fields that can appear. Please refer to Conditional fields in Order Responses.

New Order List - OTOCO (TRADE)
POST /api/v3/orderList/otoco

Place an OTOCO.

An OTOCO (One-Triggers-One-Cancels-the-Other) is an order list comprised of 3 orders.

The first order is called the working order and must be LIMIT or LIMIT_MAKER. Initially, only the working order goes on the order book.

The behavior of the working order is the same as the OTO.
OTOCO has 2 pending orders (pending above and pending below), forming an OCO pair. The pending orders are only placed on the order book when the working order gets fully filled.

The rules of the pending above and pending below follow the same rules as the Order List OCO.
OTOCOs add 3 orders against the unfilled order count, EXCHANGE_MAX_NUM_ORDERS filter, and MAX_NUM_ORDERS filter.

Weight: 1

Parameters:

Name	Type	Mandatory	Description
symbol	STRING	YES	
listClientOrderId	STRING	NO	Arbitrary unique ID among open order lists. Automatically generated if not sent.
A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired.
listClientOrderId is distinct from the workingClientOrderId, pendingAboveClientOrderId, and the pendingBelowClientOrderId.
newOrderRespType	ENUM	NO	Format of the JSON response. Supported values: Order Response Type
selfTradePreventionMode	ENUM	NO	The allowed values are dependent on what is configured on the symbol. Supported values: STP Modes
workingType	ENUM	YES	Supported values: LIMIT, LIMIT_MAKER
workingSide	ENUM	YES	Supported values: Order side
workingClientOrderId	STRING	NO	Arbitrary unique ID among open orders for the working order.
Automatically generated if not sent.
workingPrice	DECIMAL	YES	
workingQuantity	DECIMAL	YES	
workingIcebergQty	DECIMAL	NO	This can only be used if workingTimeInForce is GTC.
workingTimeInForce	ENUM	NO	Supported values: Time In Force
workingStrategyId	LONG	NO	Arbitrary numeric value identifying the working order within an order strategy.
workingStrategyType	INT	NO	Arbitrary numeric value identifying the working order strategy.
Values smaller than 1000000 are reserved and cannot be used.
pendingSide	ENUM	YES	Supported values: Order side
pendingQuantity	DECIMAL	YES	
pendingAboveType	ENUM	YES	Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT
pendingAboveClientOrderId	STRING	NO	Arbitrary unique ID among open orders for the pending above order.
Automatically generated if not sent.
pendingAbovePrice	DECIMAL	NO	
pendingAboveStopPrice	DECIMAL	NO	
pendingAboveTrailingDelta	DECIMAL	NO	
pendingAboveIcebergQty	DECIMAL	NO	This can only be used if pendingAboveTimeInForce is GTC or if pendingAboveType is LIMIT_MAKER.
pendingAboveTimeInForce	ENUM	NO	
pendingAboveStrategyId	LONG	NO	Arbitrary numeric value identifying the pending above order within an order strategy.
pendingAboveStrategyType	INT	NO	Arbitrary numeric value identifying the pending above order strategy.
Values smaller than 1000000 are reserved and cannot be used.
pendingBelowType	ENUM	NO	Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT
pendingBelowClientOrderId	STRING	NO	Arbitrary unique ID among open orders for the pending below order.
Automatically generated if not sent.
pendingBelowPrice	DECIMAL	NO	
pendingBelowStopPrice	DECIMAL	NO	
pendingBelowTrailingDelta	DECIMAL	NO	
pendingBelowIcebergQty	DECIMAL	NO	This can only be used if pendingBelowTimeInForce is GTC, or if pendingBelowType is LIMIT_MAKER.
pendingBelowTimeInForce	ENUM	NO	Supported values: Time In Force
pendingBelowStrategyId	LONG	NO	Arbitrary numeric value identifying the pending below order within an order strategy.
pendingBelowStrategyType	INT	NO	Arbitrary numeric value identifying the pending below order strategy.
Values smaller than 1000000 are reserved and cannot be used.
recvWindow	LONG	NO	The value cannot be greater than 60000.
timestamp	LONG	YES	
Mandatory parameters based on pendingAboveType, pendingBelowType or workingType
Depending on the pendingAboveType/pendingBelowType or workingType, some optional parameters will become mandatory.

Type	Additional mandatory parameters	Additional information
workingType = LIMIT	workingTimeInForce	
pendingAboveType= LIMIT_MAKER	pendingAbovePrice	
pendingAboveType= STOP_LOSS	pendingAboveStopPrice and/or pendingAboveTrailingDelta	
pendingAboveType=STOP_LOSS_LIMIT	pendingAbovePrice, pendingAboveStopPrice and/or pendingAboveTrailingDelta, pendingAboveTimeInForce	
pendingBelowType= LIMIT_MAKER	pendingBelowPrice	
pendingBelowType= STOP_LOSS	pendingBelowStopPrice and/or pendingBelowTrailingDelta	
pendingBelowType=STOP_LOSS_LIMIT	pendingBelowPrice, pendingBelowStopPrice and/or pendingBelowTrailingDelta, pendingBelowTimeInForce	
Data Source:

Matching Engine

Response:

{
    "orderListId": 1,
    "contingencyType": "OTO",
    "listStatusType": "EXEC_STARTED",
    "listOrderStatus": "EXECUTING",
    "listClientOrderId": "RumwQpBaDctlUu5jyG5rs0",
    "transactionTime": 1712291372842,
    "symbol": "ABCDEF",
    "orders": [
        {
            "symbol": "LTCBTC",
            "orderId": 6,
            "clientOrderId": "fM9Y4m23IFJVCQmIrlUmMK"
        },
        {
            "symbol": "LTCBTC",
            "orderId": 7,
            "clientOrderId": "6pcQbFIzTXGZQ1e2MkGDq4"
        },
        {
            "symbol": "LTCBTC",
            "orderId": 8,
            "clientOrderId": "r4JMv9cwAYYUwwBZfbussx"
        }
    ],
    "orderReports": [
        {
            "symbol": "LTCBTC",
            "orderId": 6,
            "orderListId": 1,
            "clientOrderId": "fM9Y4m23IFJVCQmIrlUmMK",
            "transactTime": 1712291372842,
            "price": "1.00000000",
            "origQty": "1.00000000",
            "executedQty": "0.00000000",
            "cummulativeQuoteQty": "0.00000000",
            "status": "NEW",
            "timeInForce": "GTC",
            "type": "LIMIT",
            "side": "SELL",
            "workingTime": 1712291372842,
            "selfTradePreventionMode": "NONE"
        },
        {
            "symbol": "LTCBTC",
            "orderId": 7,
            "orderListId": 1,
            "clientOrderId": "6pcQbFIzTXGZQ1e2MkGDq4",
            "transactTime": 1712291372842,
            "price": "1.00000000",
            "origQty": "5.00000000",
            "executedQty": "0.00000000",
            "cummulativeQuoteQty": "0.00000000",
            "status": "PENDING_NEW",
            "timeInForce": "IOC",
            "type": "STOP_LOSS_LIMIT",
            "side": "BUY",
            "stopPrice": "6.00000000",
            "workingTime": -1,
            "selfTradePreventionMode": "NONE"
        },
        {
            "symbol": "LTCBTC",
            "orderId": 8,
            "orderListId": 1,
            "clientOrderId": "r4JMv9cwAYYUwwBZfbussx",
            "transactTime": 1712291372842,
            "price": "3.00000000",
            "origQty": "5.00000000",
            "executedQty": "0.00000000",
            "cummulativeQuoteQty": "0.00000000",
            "status": "PENDING_NEW",
            "timeInForce": "GTC",
            "type": "LIMIT_MAKER",
            "side": "BUY",
            "workingTime": -1,
            "selfTradePreventionMode": "NONE"
        }
    ]
}

Note: The payload above does not show all fields that can appear. Please refer to Conditional fields in Order Responses.

Cancel Order list (TRADE)
DELETE /api/v3/orderList 

Cancel an entire Order List

Weight: 1

Parameters:

Name	Type	Mandatory	Description
symbol	STRING	YES	
orderListId	LONG	NO	Either orderListId or listClientOrderId must be provided
listClientOrderId	STRING	NO	Either orderListId or listClientOrderId must be provided
newClientOrderId	STRING	NO	Used to uniquely identify this cancel. Automatically generated by default
recvWindow	LONG	NO	The value cannot be greater than 60000
timestamp	LONG	YES	
Notes:

Canceling an individual order from an order list will cancel the entire order list.
If both orderListId and listClientOrderId are sent, orderListId takes precedence.
Data Source: Matching Engine

Response:

{
  "orderListId": 0,
  "contingencyType": "OCO",
  "listStatusType": "ALL_DONE",
  "listOrderStatus": "ALL_DONE",
  "listClientOrderId": "C3wyj4WVEktd7u9aVBRXcN",
  "transactionTime": 1574040868128,
  "symbol": "LTCBTC",
  "orders": [
    {
      "symbol": "LTCBTC",
      "orderId": 2,
      "clientOrderId": "pO9ufTiFGg3nw2fOdgeOXa"
    },
    {
      "symbol": "LTCBTC",
      "orderId": 3,
      "clientOrderId": "TXOvglzXuaubXAaENpaRCB"
    }
  ],
  "orderReports": [
    {
      "symbol": "LTCBTC",
      "origClientOrderId": "pO9ufTiFGg3nw2fOdgeOXa",
      "orderId": 2,
      "orderListId": 0,
      "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
      "transactTime": 1688005070874,
      "price": "1.00000000",
      "origQty": "10.00000000",
      "executedQty": "0.00000000",
      "cummulativeQuoteQty": "0.00000000",
      "status": "CANCELED",
      "timeInForce": "GTC",
      "type": "STOP_LOSS_LIMIT",
      "side": "SELL",
      "stopPrice": "1.00000000",
      "selfTradePreventionMode": "NONE"
    },
    {
      "symbol": "LTCBTC",
      "origClientOrderId": "TXOvglzXuaubXAaENpaRCB",
      "orderId": 3,
      "orderListId": 0,
      "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
      "transactTime": 1688005070874,
      "price": "3.00000000",
      "origQty": "10.00000000",
      "executedQty": "0.00000000",
      "cummulativeQuoteQty": "0.00000000",
      "status": "CANCELED",
      "timeInForce": "GTC",
      "type": "LIMIT_MAKER",
      "side": "SELL",
      "selfTradePreventionMode": "NONE"
    }
  ]
}

Query Order lists (USER_DATA)
GET /api/v3/orderList 

Retrieves a specific order list based on provided optional parameters.

Weight: 4

Parameters:

Name	Type	Mandatory	Description
orderListId	LONG	NO	Either orderListId or listClientOrderId must be provided
origClientOrderId	STRING	NO	Either orderListId or listClientOrderId must be provided
recvWindow	LONG	NO	The value cannot be greater than 60000
timestamp	LONG	YES	
Data Source: Database

Response:

{
  "orderListId": 27,
  "contingencyType": "OCO",
  "listStatusType": "EXEC_STARTED",
  "listOrderStatus": "EXECUTING",
  "listClientOrderId": "h2USkA5YQpaXHPIrkd96xE",
  "transactionTime": 1565245656253,
  "symbol": "LTCBTC",
  "orders": [
    {
      "symbol": "LTCBTC",
      "orderId": 4,
      "clientOrderId": "qD1gy3kc3Gx0rihm9Y3xwS"
    },
    {
      "symbol": "LTCBTC",
      "orderId": 5,
      "clientOrderId": "ARzZ9I00CPM8i3NhmU9Ega"
    }
  ]
}

Query all Order lists (USER_DATA)
GET /api/v3/allOrderList

Retrieves all order lists based on provided optional parameters.

Note that the time between startTime and endTime can't be longer than 24 hours.

Weight: 20

Parameters:

Name	Type	Mandatory	Description
fromId	LONG	NO	If supplied, neither startTime or endTime can be provided
startTime	LONG	NO	
endTime	LONG	NO	
limit	INT	NO	Default Value: 500; Max Value: 1000
recvWindow	LONG	NO	The value cannot be greater than 60000
timestamp	LONG	YES	
Data Source: Database

Response:

[
  {
    "orderListId": 29,
    "contingencyType": "OCO",
    "listStatusType": "EXEC_STARTED",
    "listOrderStatus": "EXECUTING",
    "listClientOrderId": "amEEAXryFzFwYF1FeRpUoZ",
    "transactionTime": 1565245913483,
    "symbol": "LTCBTC",
    "orders": [
      {
        "symbol": "LTCBTC",
        "orderId": 4,
        "clientOrderId": "oD7aesZqjEGlZrbtRpy5zB"
      },
      {
        "symbol": "LTCBTC",
        "orderId": 5,
        "clientOrderId": "Jr1h6xirOxgeJOUuYQS7V3"
      }
    ]
  },
  {
    "orderListId": 28,
    "contingencyType": "OCO",
    "listStatusType": "EXEC_STARTED",
    "listOrderStatus": "EXECUTING",
    "listClientOrderId": "hG7hFNxJV6cZy3Ze4AUT4d",
    "transactionTime": 1565245913407,
    "symbol": "LTCBTC",
    "orders": [
      {
        "symbol": "LTCBTC",
        "orderId": 2,
        "clientOrderId": "j6lFOfbmFMRjTYA7rRJ0LP"
      },
      {
        "symbol": "LTCBTC",
        "orderId": 3,
        "clientOrderId": "z0KCjOdditiLS5ekAFtK81"
      }
    ]
  }
]

Query Open Order lists (USER_DATA)
GET /api/v3/openOrderList 

Weight: 6

Parameters:

Name	Type	Mandatory	Description
recvWindow	LONG	NO	The value cannot be greater than 60000
timestamp	LONG	YES	
Data Source: Database

Response:

[
  {
    "orderListId": 31,
    "contingencyType": "OCO",
    "listStatusType": "EXEC_STARTED",
    "listOrderStatus": "EXECUTING",
    "listClientOrderId": "wuB13fmulKj3YjdqWEcsnp",
    "transactionTime": 1565246080644,
    "symbol": "LTCBTC",
    "orders": [
      {
        "symbol": "LTCBTC",
        "orderId": 4,
        "clientOrderId": "r3EH2N76dHfLoSZWIUw1bT"
      },
      {
        "symbol": "LTCBTC",
        "orderId": 5,
        "clientOrderId": "Cv1SnyPD3qhqpbjpYEHbd2"
      }
    ]
  }
]

SOR
New order using SOR (TRADE)
POST /api/v3/sor/order

Places an order using smart order routing (SOR).

Weight: 1

Parameters:

Name	Type	Mandatory	Description
symbol	STRING	YES	
side	ENUM	YES	
type	ENUM	YES	
timeInForce	ENUM	NO	
quantity	DECIMAL	YES	
price	DECIMAL	NO	
newClientOrderId	STRING	NO	A unique id among open orders. Automatically generated if not sent.
Orders with the same newClientOrderID can be accepted only when the previous one is filled, otherwise the order will be rejected.
strategyId	LONG	NO	
strategyType	INT	NO	The value cannot be less than 1000000.
icebergQty	DECIMAL	NO	Used with LIMIT to create an iceberg order.
newOrderRespType	ENUM	NO	Set the response JSON. ACK, RESULT, or FULL. Default to FULL
selfTradePreventionMode	ENUM	NO	The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
recvWindow	LONG	NO	The value cannot be greater than 60000
timestamp	LONG	YES	
Note: POST /api/v3/sor/order only supports LIMIT and MARKET orders. quoteOrderQty is not supported.

Data Source: Matching Engine

Response:

{
  "symbol": "BTCUSDT",
  "orderId": 2,
  "orderListId": -1,
  "clientOrderId": "sBI1KM6nNtOfj5tccZSKly",
  "transactTime": 1689149087774,
  "price": "31000.00000000",
  "origQty": "0.50000000",
  "executedQty": "0.50000000",
  "cummulativeQuoteQty": "14000.00000000",
  "status": "FILLED",
  "timeInForce": "GTC",
  "type": "LIMIT",
  "side": "BUY",
  "workingTime": 1689149087774,
  "fills": [
    {
      "matchType": "ONE_PARTY_TRADE_REPORT",
      "price": "28000.00000000",
      "qty": "0.50000000",
      "commission": "0.00000000",
      "commissionAsset": "BTC",
      "tradeId": -1,
      "allocId": 0
    }
  ],
  "workingFloor": "SOR",              
  "selfTradePreventionMode": "NONE",
  "usedSor": true
}

Test new order using SOR (TRADE)
POST /api/v3/sor/order/test

Test new order creation and signature/recvWindow using smart order routing (SOR). Creates and validates a new order but does not send it into the matching engine.

Weight:

Condition	Request Weight
Without computeCommissionRates	1
With computeCommissionRates	20
Parameters:

In addition to all parameters accepted by POST /api/v3/sor/order, the following optional parameters are also accepted:

Name	Type	Mandatory	Description
computeCommissionRates	BOOLEAN	NO	Default: false
Data Source: Memory

Response:

Without computeCommissionRates

{}

With computeCommissionRates

{
  "standardCommissionForOrder": {  //Standard commission rates on trades from the order.
    "maker": "0.00000112",
    "taker": "0.00000114",
  },
  "taxCommissionForOrder": {       //Tax commission rates for trades from the order
    "maker": "0.00000112",
    "taker": "0.00000114",
  },
  "discount": {                    //Discount on standard commissions when paying in BNB.
    "enabledForAccount": true,
    "enabledForSymbol": true,
    "discountAsset": "BNB",
    "discount": "0.25000000"       //Standard commission is reduced by this rate when paying commission in BNB.
  }
}

Account Endpoints
Account information (USER_DATA)
GET /api/v3/account 

Get current account information.

Weight: 20

Parameters:

Name	Type	Mandatory	Description
omitZeroBalances	BOOLEAN	NO	When set to true, emits only the non-zero balances of an account.
Default value: false
recvWindow	LONG	NO	The value cannot be greater than 60000
timestamp	LONG	YES	
Data Source: Memory => Database

Response:

{
  "makerCommission": 15,
  "takerCommission": 15,
  "buyerCommission": 0,
  "sellerCommission": 0,
  "commissionRates": {
    "maker": "0.00150000",
    "taker": "0.00150000",
    "buyer": "0.00000000",
    "seller": "0.00000000"
  },
  "canTrade": true,
  "canWithdraw": true,
  "canDeposit": true,
  "brokered": false,
  "requireSelfTradePrevention": false,
  "preventSor": false,
  "updateTime": 123456789,
  "accountType": "SPOT",
  "balances": [
    {
      "asset": "BTC",
      "free": "4723846.89208129",
      "locked": "0.00000000"
    },
    {
      "asset": "LTC",
      "free": "4763368.68006011",
      "locked": "0.00000000"
    }
  ],
  "permissions": [
    "SPOT"
  ],
  "uid": 354937868
}

Account trade list (USER_DATA)
GET /api/v3/myTrades 

Get trades for a specific account and symbol.

Weight: 20

Parameters:

Name	Type	Mandatory	Description
symbol	STRING	YES	
orderId	LONG	NO	This can only be used in combination with symbol.
startTime	LONG	NO	
endTime	LONG	NO	
fromId	LONG	NO	TradeId to fetch from. Default gets most recent trades.
limit	INT	NO	Default 500; max 1000.
recvWindow	LONG	NO	The value cannot be greater than 60000
timestamp	LONG	YES	
Notes:

If fromId is set, it will get trades >= that fromId. Otherwise most recent trades are returned.
The time between startTime and endTime can't be longer than 24 hours.
These are the supported combinations of all parameters:
symbol
symbol + orderId
symbol + startTime
symbol + endTime
symbol + fromId
symbol + startTime + endTime
symbol+ orderId + fromId
Data Source: Memory => Database

Response:

[
  {
    "symbol": "BNBBTC",
    "id": 28457,
    "orderId": 100234,
    "orderListId": -1,
    "price": "4.00000100",
    "qty": "12.00000000",
    "quoteQty": "48.000012",
    "commission": "10.10000000",
    "commissionAsset": "BNB",
    "time": 1499865549590,
    "isBuyer": true,
    "isMaker": false,
    "isBestMatch": true
  }
]


Query Unfilled Order Count (USER_DATA)
GET /api/v3/rateLimit/order

Displays the user's unfilled order count for all intervals.

Weight: 40

Parameters:

Name	Type	Mandatory	Description
recvWindow	LONG	NO	The value cannot be greater than 60000
timestamp	LONG	YES	
Data Source: Memory

Response:

[

  {
    "rateLimitType": "ORDERS",
    "interval": "SECOND",
    "intervalNum": 10,
    "limit": 50,
    "count": 0
  },
  {
    "rateLimitType": "ORDERS",
    "interval": "DAY",
    "intervalNum": 1,
    "limit": 160000,
    "count": 0
  }
]

Query Prevented Matches (USER_DATA)
GET /api/v3/myPreventedMatches

Displays the list of orders that were expired due to STP.

These are the combinations supported:

symbol + preventedMatchId
symbol + orderId
symbol + orderId + fromPreventedMatchId (limit will default to 500)
symbol + orderId + fromPreventedMatchId + limit
Parameters:

Name	Type	Mandatory	Description
symbol	STRING	YES	
preventedMatchId	LONG	NO	
orderId	LONG	NO	
fromPreventedMatchId	LONG	NO	
limit	INT	NO	Default: 500; Max: 1000
recvWindow	LONG	NO	The value cannot be greater than 60000
timestamp	LONG	YES	
Weight:

Case	Weight
If symbol is invalid	2
Querying by preventedMatchId	2
Querying by orderId	20
Data Source:

Database

Response:

[
  {
    "symbol": "BTCUSDT",
    "preventedMatchId": 1,
    "takerOrderId": 5,
    "makerSymbol": "BTCUSDT",
    "makerOrderId": 3,
    "tradeGroupId": 1,
    "selfTradePreventionMode": "EXPIRE_MAKER",
    "price": "1.100000",
    "makerPreventedQuantity": "1.300000",
    "transactTime": 1669101687094
  }
]

Query Allocations (USER_DATA)
GET /api/v3/myAllocations

Retrieves allocations resulting from SOR order placement.

Weight: 20

Parameters:

Name	Type	Mandatory	Description
symbol	STRING	Yes	
startTime	LONG	No	
endTime	LONG	No	
fromAllocationId	INT	No	
limit	INT	No	Default 500;Max 1000
orderId	LONG	No	
recvWindow	LONG	No	The value cannot be greater than 60000.
timestamp	LONG	No	
Supported parameter combinations:

Parameters	Response
symbol	allocations from oldest to newest
symbol + startTime	oldest allocations since startTime
symbol + endTime	newest allocations until endTime
symbol + startTime + endTime	allocations within the time range
symbol + fromAllocationId	allocations by allocation ID
symbol + orderId	allocations related to an order starting with oldest
symbol + orderId + fromAllocationId	allocations related to an order by allocation ID
Note: The time between startTime and endTime can't be longer than 24 hours.

Data Source: Database

Response:

[
  {
    "symbol": "BTCUSDT",
    "allocationId": 0,
    "allocationType": "SOR",
    "orderId": 1,
    "orderListId": -1,
    "price": "1.00000000",
    "qty": "5.00000000",
    "quoteQty": "5.00000000",
    "commission": "0.00000000",
    "commissionAsset": "BTC",
    "time": 1687506878118,
    "isBuyer": true,
    "isMaker": false,
    "isAllocator": false
  }
]

Query Commission Rates (USER_DATA)
GET /api/v3/account/commission

Get current account commission rates.

Weight: 20

Parameters:

Name	Type	Mandatory	Description
symbol	STRING	YES	
Data Source: Database

Response:

{
  "symbol": "BTCUSDT",
  "standardCommission": {         //Commission rates on trades from the order.
    "maker": "0.00000010",
    "taker": "0.00000020",
    "buyer": "0.00000030",
    "seller": "0.00000040" 
  },
  "taxCommission": {              //Tax commission rates for trades from the order.
    "maker": "0.00000112",
    "taker": "0.00000114",
    "buyer": "0.00000118",
    "seller": "0.00000116" 
  },
  "discount": {                   //Discount commission when paying in BNB
    "enabledForAccount": true,
    "enabledForSymbol": true,
    "discountAsset": "BNB",
    "discount": "0.75000000"      //Standard commission is reduced by this rate when paying commission in BNB.
  }
}

User data stream endpoints
Specifics on how user data streams work can be found here.

Start user data stream (USER_STREAM)
POST /api/v3/userDataStream

Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.

Weight: 2

Parameters: NONE

Data Source: Memory

Response:

{
  "listenKey": "pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1"
}

Keepalive user data stream (USER_STREAM)
PUT /api/v3/userDataStream

Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.

Weight: 2

Data Source: Memory

Parameters:

Name	Type	Mandatory	Description
listenKey	STRING	YES	
Response:

{}

Close user data stream (USER_STREAM)
DELETE /api/v3/userDataStream

Close out a user data stream.

Weight: 2

Parameters:

Name	Type	Mandatory	Description
listenKey	STRING	YES	
Data Source: Memory

Response:

{}